services:
  nginx:
    build:
      dockerfile: dockerfile.nginx
    container_name: nginx
    restart: unless-stopped
    ports: 
      - "80:80"

  postgresql:
    build:
      dockerfile: dockerfile.postgres
    container_name: postgresql
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=tr_ibd_owner
      - POSTGRES_PASSWORD=owner_pass
      - POSTGRES_DB=tr_ibd
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tr_ibd_owner -d tr_ibd"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgrest_1:
    image: postgrest/postgrest
    container_name: postgrest_1
    restart: unless-stopped
    ports: 
      - "3000:3000"
    environment:
      - PGRST_LOG_LEVEL=debug
      - PGRST_SERVER_PORT=3000
      - PGRST_DB_URI=postgres://tr_ibd_owner:owner_pass@host.docker.internal/tr_ibd
      - PGRST_JWT_SECRET=abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz
      - PGRST_DB_PRE_CONFIG=postgrest.pre_config_fn
    depends_on:
      postgresql:
        condition: service_healthy
  
  # postgrest_2:
  #   image: postgrest/postgrest
  #   container_name: postgrest_2
  #   restart: unless-stopped
  #   ports: 
  #     - "3001:3001"
  #   environment:
  #     - PGRST_LOG_LEVEL=debug
  #     - PGRST_SERVER_PORT=3001
  #     - PGRST_DB_URI=postgres://tr_ibd_owner:owner_pass@host.docker.internal/tr_ibd
  #     - PGRST_DB_PRE_CONFIG=postgrest.pre_config_fn
  #   depends_on:
  #     postgresql:
  #       condition: service_healthy

  # postgrest_3:
  #   image: postgrest/postgrest
  #   container_name: postgrest_3
  #   restart: unless-stopped
  #   ports: 
  #     - "3002:3002"
  #   environment:
  #     - PGRST_LOG_LEVEL=debug
  #     - PGRST_SERVER_PORT=3002
  #     - PGRST_DB_URI=postgres://tr_ibd_owner:owner_pass@host.docker.internal/tr_ibd
  #     - PGRST_DB_PRE_CONFIG=postgrest.pre_config_fn
  #   depends_on:
  #     postgresql:
  #       condition: service_healthy